# This is a basic workflow to help you get started with Actions.

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
     branches: [ "master" ]
  #Trigger workflow when a tag is pushed.
  #push:
   # tags:
    #  - 'v*' 

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish Windows x64 Executable
        run: dotnet publish -c Release -r win-x64 --self-contained true /p:PublishSingleFile=false -o publish_output_win
   
      - name: Zip Windows build
        run: powershell Compress-Archive -Path publish_output_win\* -DestinationPath windows-x64-${{ github.ref_name }}.zip

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64-exe
          path: windows-x64-${{ github.ref_name }}.zip

  build-macos:
    runs-on: macos-latest # Use a macOS runner for macOS build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish macOS x64 Executable (Intel)
        run: dotnet publish -c Release -r osx-x64 --self-contained true /p:PublishSingleFile=false -o publish_output_osx_x64

      - name: Zip macOS x64 build
        run: zip -r macos-x64-${{ github.ref_name }}.zip publish_output_osx_x64

      - name: Upload macOS x64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64-app
          path: macos-x64-${{ github.ref_name }}.zip

      - name: Publish macOS arm64 Executable (Apple Silicon)
        run: dotnet publish -c Release -r osx-arm64 --self-contained true /p:PublishSingleFile=true -o publish_output_osx_arm64

      - name: Zip macOS arm64 build
        run: zip -r macos-arm64-${{ github.ref_name }}.zip publish_output_osx_arm64

      - name: Upload macOS arm64 Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-app
          path: macos-arm64-${{ github.ref_name }}.zip

  create-release:
    needs: [build-windows, build-macos] # This job depends on both build jobs
    permissions:
      contents: write   
    runs-on: ubuntu-latest # A lightweight runner for creating the release
    if: github.ref == 'refs/heads/master' && startsWith(github.event.head_commit.message, 'release:')
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts (for debugging)
        run: ls -R artifacts
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Automated release for build ${{ github.run_number }}.
            Changes: ${{ github.event.head_commit.message }}
          files: artifacts/**/*.zip # Attach all downloaded artifacts to the release
