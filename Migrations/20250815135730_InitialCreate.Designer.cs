// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepairTracking.Data;

#nullable disable

namespace RepairTracking.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250815135730_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("RepairTracking.Data.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<int>("CreatedUser")
                        .HasColumnType("INTEGER")
                        .HasColumnName("created_user");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("Passive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("passive");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone_number");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk");

                    b.HasIndex("CreatedUser");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("RepairTracking.Data.Models.CustomersVehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("customer_id");

                    b.Property<bool>("Passive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("passive");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("customers_vehicles_pk");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("customers_vehicles", (string)null);
                });

            modelBuilder.Entity("RepairTracking.Data.Models.Renovation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Complaint")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("complaint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("delivery_date");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("note");

                    b.Property<bool?>("Passive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("passive");

                    b.Property<DateOnly>("RepairDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("repair_date");

                    b.Property<string>("ReportPath")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("report_path");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("renovations_pk");

                    b.HasIndex("VehicleId");

                    b.ToTable("renovations", (string)null);
                });

            modelBuilder.Entity("RepairTracking.Data.Models.RenovationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("note");

                    b.Property<int?>("Passive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("passive");

                    b.Property<double>("Price")
                        .HasColumnType("REAL")
                        .HasColumnName("price");

                    b.Property<int>("RenovationId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("renovation_id");

                    b.Property<string>("TCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("t-code");

                    b.HasKey("Id")
                        .HasName("renovation_details_pk");

                    b.HasIndex("RenovationId");

                    b.ToTable("renovation_details", (string)null);
                });

            modelBuilder.Entity("RepairTracking.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<bool?>("Confirmed")
                        .HasColumnType("INTEGER")
                        .HasColumnName("confirmed");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<bool>("Passive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("passive");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("surname");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("users_pk_3")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex(new[] { "Id" }, "users_pk")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "users_pk_2")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("RepairTracking.Data.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("ChassisNo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("chassis_no");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("color");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("customer_id");

                    b.Property<string>("EngineNo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("engine_no");

                    b.Property<string>("Fuel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("fuel");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB")
                        .HasColumnName("image");

                    b.Property<int?>("Km")
                        .HasColumnType("INTEGER")
                        .HasColumnName("km");

                    b.Property<int?>("Model")
                        .HasColumnType("INTEGER")
                        .HasColumnName("model");

                    b.Property<bool>("Passive")
                        .HasColumnType("INTEGER")
                        .HasColumnName("passive");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("plate_number");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("id");

                    b.HasIndex("CustomerId");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("RepairTracking.Data.Models.Customer", b =>
                {
                    b.HasOne("RepairTracking.Data.Models.User", "CreatedUserNavigation")
                        .WithMany("Customers")
                        .HasForeignKey("CreatedUser")
                        .IsRequired()
                        .HasConstraintName("customers_users_id_fk");

                    b.Navigation("CreatedUserNavigation");
                });

            modelBuilder.Entity("RepairTracking.Data.Models.CustomersVehicle", b =>
                {
                    b.HasOne("RepairTracking.Data.Models.Customer", "Customer")
                        .WithMany("CustomersVehicles")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("customers_vehicles_customers_id_fk");

                    b.HasOne("RepairTracking.Data.Models.Vehicle", "Vehicle")
                        .WithMany("CustomersVehicles")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("customers_vehicles_vehicles_id_fk");

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RepairTracking.Data.Models.Renovation", b =>
                {
                    b.HasOne("RepairTracking.Data.Models.Vehicle", "Vehicle")
                        .WithMany("Renovations")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("renovations_vehicles_id_fk");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RepairTracking.Data.Models.RenovationDetail", b =>
                {
                    b.HasOne("RepairTracking.Data.Models.Renovation", "Renovation")
                        .WithMany("RenovationDetails")
                        .HasForeignKey("RenovationId")
                        .IsRequired()
                        .HasConstraintName("renovation_details_renovations_id_fk");

                    b.Navigation("Renovation");
                });

            modelBuilder.Entity("RepairTracking.Data.Models.Vehicle", b =>
                {
                    b.HasOne("RepairTracking.Data.Models.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("vehicles_customers_id_fk");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RepairTracking.Data.Models.Customer", b =>
                {
                    b.Navigation("CustomersVehicles");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RepairTracking.Data.Models.Renovation", b =>
                {
                    b.Navigation("RenovationDetails");
                });

            modelBuilder.Entity("RepairTracking.Data.Models.User", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("RepairTracking.Data.Models.Vehicle", b =>
                {
                    b.Navigation("CustomersVehicles");

                    b.Navigation("Renovations");
                });
#pragma warning restore 612, 618
        }
    }
}
